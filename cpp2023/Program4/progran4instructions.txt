COSC 1337 Programming Fundamentals II
Kathryn Rehfield
Lab 4: Searching and Sorting
Due: 10/29/23
Make any modifications necessary to address feedback about your previous lab.
You will now implement options 3 and 4.
Each option will be in its own function.
Option 3: Sorts the array in ascending order by artist. You can implement a bubble sort or a selection sort.
Option 4: Reads a CD artist and title from the keyboard and displays an appropriate message:
                CD is in the collection or CD is not in the collection
You will submit the following:
Your program source code named “lab4_Firstname_Lastname.cpp”

NOTE – Violating any of the following will get you a 20 point deduction on your lab:
Your main() controls the program.  Your main() should never just call another function to do all the work.
You should NEVER call main().
You should NEVER intentionally write an infinite loop.
You should NEVER use break, exit, quit, end, return, or anything to leave a loop, function, or other construct prematurely, unless it is part of the structure as in a switch statement.
You should NEVER have a function call itself, unless it is intentional recursion.
You should NEVER use global variables.  However, you may use global constants if it is appropriate and they are used properly.
You should have only one return statement in a function that returns a value. (Recursion is the exception.)
Lab Grade Points                       
Comments 
Including:
Program description (comment block at top of program with name, lab number and complete program description)
Function descriptions (see function heading below)
Comments at major algorithm steps (at a minimum)
Followed directions
Correct output
Structured program design
Meaningful identifier names
Program heading should look similar to this:
/*********************************************************************/
/* Your name
/* Lab 1 Solution                                                    
/* This program does this and that
/* (give details that would help a programmer understand
/*  what the program does before looking at the code)                            
/*********************************************************************/ 

Function heading should look similar to this:
/**************************************************/
/* Function:   functionName                                       
/* Inputs:       parameter names and what they represent
/* Outputs:    return value name and description
/* Purpose:    This function blah, blah, blah...        
/**************************************************/